:: npcNamed [widget]
<<widget "npcNamed">>
/* to add new Named NPC, add their unique data to $NPCName_unique_data below
 * all values except for `title` are optional. possible values are:
 * -----------------------------
 * title: npc title in the social tab
 * insecurity: what bothers npc during combat. random if not set
 * important: whether npc is a potential LI
 * maxlove, maxlust, maxdom, maxtrauma, maxrage: upper caps on the LI variables
 * eyecolor: eye colour. can be an array of possible colors
 * haircolor: hair colour. can be an array of possible colors
 * type: beast type (wolf, dog, hawk, etc.)
 * age: defaults to "adult", can be switched to "teen"
 */
<<set $NPCName_unique_data to {	Avery:{		title: "businessperson",
											insecurity: "weak",
											npcConfig: {	important: true,
															rage: { requirements: "averyragerevealed" }}
								},
								Bailey:{	title: "caretaker",
											insecurity: "weak",
											hairColour: ["black","brown"]
								},
								Briar:{		title: "brothel owner",
											insecurity: "looks"
								}, 
								Charlie:{	title: "dance coach",
											insecurity: "ethics",
											hairColour: "ginger"
								},
								Darryl:{	title: "club owner",
											insecurity: "ethics",
											hairColour: "brown",
											npcConfig: { love: { maxValue: 50 }}
								},
								Doren:{		title: "English teacher",
											insecurity: "ethics",
											hairColour: "red"
								}, 
								Eden:{		title: "hunter",
											insecurity: "looks",
											npcConfig:	{	important : true,
															love : { maxValue: 200 },
															dom : { requirements: false }}
								},
								Gwylan:{	title: "shopkeeper",
											insecurity: "weak",
											age: "teen",
											hairColour: "mousy"
								},
								Harper:{	title: "doctor",
											insecurity: "skill"
								},
								Jordan:{	title: "pious",
											insecurity: "ethics",
											eyeColour: "light blue",
											hairColour: "blond"
								},
								Kylar:{		title: "loner",
											insecurity: "weak",
											important: true,
											age: "teen",
											hairColour: ["black", "brown"]
								},
								Landry:{	title: "criminal",
											insecurity: "skill",
											hairColour: "black"
								},
								Leighton:{	title: "headteacher",
											insecurity: "skill",
											eyeColour: "green",
											hairColour: "black"
								},
								Mason:{		title: "swimming teacher",
											insecurity: "ethics",
											npcConfig: { love: { maxValue : 50 }}
								},
								Morgan:{	title: "sewer dweller",
											insecurity: "weak",
											hairColour: "ginger"
								},
								River:{		title: "maths teacher",
											insecurity: "ethics",
											eyeColour: "light blue",
											hairColour: "brown",
											npcConfig: { love: { maxValue: 50 }}
								},
								Robin:{		title: "orphan",
											insecurity: "ethics",
											age: "teen",
											npcConfig: {	important: true,
															dom: { name: "Confidence", activeIcon: "img/ui/confidence.png", color: "blue" }}
								},
								Sam:{		title: "cafe owner",
											insecurity: "ethics",
											npcConfig: { love: { minValue: -50, maxValue: 50 }}
								},
								Sirris:{	title: "science teacher",
											insecurity: "ethics"
								},
								Whitney:{	title: "bully",
											insecurity: "looks",
											important: true,
											age: "teen",
											maxlove: 30,
											maxdom: 20,
											hairColour: "blond",
											npcConfig: {	important: true,
															love: { maxValue : 30 },
															dom: { maxValue : 30 }}
								},
								Winter:{	title: "history teacher",
											insecurity: "skill"
								},
								'Black Wolf':{	title: "alpha",
												insecurity: "weak",
												type: "wolf",
												hairColour: "black"
								},
								Niki:{		title: "photographer",
											insecurity: "skill"
								},
								Quinn:{		title: "mayor",
											insecurity: "looks"
								},
								Remy:{		title: "farmer",
											insecurity: "looks",
											eyeColour: "green",
											hairColour: "brown"
								},
								Alex:{		title: "farmhand",
											insecurity: "weak",
											important: true,
											age: "teen",
											eyeColour: "green",
											hairColour: "red",
											npcConfig: {	important: true,
															love: { minValue: -50, maxValue: 100 },
															lust: { maxValue: 100 },
															dom: { minValue: -50, maxValue: 100 }}
								},
								'Great Hawk':{	title: "terror",
												insecurity: "looks",
												type: "hawk",
												eyeColour: "light blue",
												hairColour: "brown",
												npcConfig: { important: true }
								},
								Wren:{		title: "smuggler",
											insecurity: "ethics",
											eyeColour: "brown",
											hairColour: "blond"
								}
}>>
/* list of variables that will be set for every npc. keep it short. */
<<set $baseNNPC to ["init",
					"intro",
					"state",
					"title",
					"description",
					"insecurity",
					"type",
					"age",
					"gender",
					"pronoun",
					"bottomsize",
					"breastsize",
					"breastdesc",
					"breastsdesc",
					"penis",
					"penisdesc",
					"penissize",
					"ballssize",
					"vagina",
					"trust",
					"love",
					"dom",
					"lust",
					"rage",
					"trauma",
					"eyeColour",
					"hairColour"
					]>>
/* list of dynamic NPC values that need to be clamped */
<<set $baseNNPCd to ["love", "dom", "lust", "rage", "trauma"]>>

<<set $NPCNameList to Object.keys($NPCName_unique_data)>>
<<if ndef $NPCName>><<set $NPCName to {}>><</if>>

/* main npc set/update loop 
 * initializes undefined $baseNNPC properties with zeroes,
 * then overwrites them with npc-specific properties,
 * if a property is an array - chooses 1 element randomly,
 * then changes remaining zeroes to more sane values if needed
 */
<<for _npc range $NPCNameList>>
	<<if ndef $NPCName[_npc]>><<set $NPCName[_npc] to {}>><</if>>
	<<for _var range $baseNNPC>>
		<<if ndef $NPCName[_npc][_var]>><<set $NPCName[_npc][_var] to 0>><</if>>
	<</for>>
	<<set $NPCName[_npc].nam to _npc>>
	<<set $NPCName[_npc].description to _npc>>
	<<for _stat range Object.keys($NPCName_unique_data[_npc])>>
		<<set $NPCName[_npc][_stat] to $NPCName_unique_data[_npc][_stat]>>
		<<set $NPCName[_npc][_stat] to either($NPCName[_npc][_stat])>>
	<</for>>
	<<if $NPCName[_npc].insecurity eq 0>>
		<<set $NPCName[_npc].insecurity to either(["weak", "ethics", "looks", "skill"])>>
	<</if>>
	<<if $NPCName[_npc].age eq 0>>
		<<set $NPCName[_npc].age to "adult">>
	<</if>>
	<<if $NPCName[_npc].type eq 0>>
		<<set $NPCName[_npc].type to "human">>
	<</if>>
	<<if $NPCName[_npc].eyeColour eq 0>>
		<<set $NPCName[_npc].eyeColour to either(["purple","dark blue","light blue","amber","hazel","green","red","pink","grey"])>>	
	<</if>>
	<<if $NPCName[_npc].hairColour eq 0>>
		<<set $NPCName[_npc].hairColour to either(["red","black","brown","lightbrown","blond","platinumblond","strawberryblond","ginger"])>>
	<</if>>
<</for>>

<</widget>>


<<widget "npcNamedUpdate">>/*Applies new system to old saves, and carries over relevant variables.*/
<<if $objectVersion.NPCName isnot 3>>
	<<set $objectVersion.NPCName to 3>>
	<<if def $NPCName>>
		<<set _oldNPCName to clone($NPCName)>>
		<<set _oldNPCNameList to clone($NPCNameList)>>
		<<run delete $NPCName>>
	<</if>>
	<<npcNamed>>

	<<set _oldvars to ["trust", "love", "dom", "lust", "rage", "state", "trauma", "gender", "penissize", "penisdesc", "penis", "vagina"]>>
	<<for _npc range $NPCNameList>>
		<<set _lowerCaseName to _npc.toLowerCase()>>
		<<if _oldNPCNameList.includes(_npc)>>
		<<set _i to _oldNPCNameList.indexOf(_npc)>>
		<</if>>
		<<if $npcNamedVersion is undefined>>
			<<if V['init' + _lowerCaseName] isnot undefined>>
			<!-- no point in checking other vars if init is not defined -->
				<<set $NPCName[_npc].init to V['init' + _lowerCaseName]>>
				<<if V[_lowerCaseName + 'gender'] isnot undefined>>
					<<set $NPCName[_npc].pronoun to V[_lowerCaseName + 'gender']>>
				<</if>>
				<<for _var range _oldvars>>
					<<if V[_lowerCaseName + _var] isnot undefined>>
						<<set $NPCName[_npc][_var] to V[_lowerCaseName + _var]>>
					<</if>>
				<</for>>
			<</if>>
		<<elseif $npcNamedVersion is 1>>
			<<if V[_lowerCaseName + 'gender'] isnot undefined>>
				<<set _oldNPCName[_i].pronoun to V[_lowerCaseName + 'gender']>>
			<</if>>
			<<if V[_lowerCaseName + 'penis'] isnot undefined>>
				<<set _oldNPCName[_i].penis to V[_lowerCaseName + 'penis']>>
			<</if>>
			<<if V[_lowerCaseName + 'vagina'] isnot undefined>>
				<<set _oldNPCName[_i].vagina to V[_lowerCaseName + 'vagina']>>
			<</if>>
		<</if>>
		/* update from v2 */
		<<if $npcNamedVersion gte 1>>
			<<if _i gte 0>>
				<<for _var range $baseNNPC>>
					<<if def _oldNPCName[_i][_var]>>
						<<set $NPCName[_npc][_var] to _oldNPCName[_i][_var]>>
					<</if>>
				<</for>>
			<</if>>
		<</if>>
		/* unset old vars */
		<<for _attribute range _oldvars>>
			<<run delete V[_lowerCaseName + _attribute]>>
		<</for>>
		<<run delete V["init" + _lowerCaseName]>>
	<</for>>
	<<unset $npcNamedVersion>>
<</if>>
<</widget>>
